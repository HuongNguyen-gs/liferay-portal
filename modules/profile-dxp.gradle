import com.liferay.gradle.util.GradleUtil
import com.liferay.gradle.util.Validator

buildscript {
	apply from: file("build-buildscript.gradle"), to: buildscript
}

task checkoutDXPScript
task removeDXPScript

File gitRepositoryDir = new File(projectDir.parentFile, "git-clone-profile-dxp")
String gitRepositoryURL = "git@github.com:liferay/liferay-portal-ee.git"

checkoutDXPScript {
	doLast {
		ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream()

		exec {
			commandLine "git", "for-each-ref", "--format=%(refname) %(committerdate:short)", "refs/remotes/*/master-private"
			ignoreExitValue = true
			standardOutput = byteArrayOutputStream
		}

		String refInfoString = byteArrayOutputStream.toString();

		if (Validator.isNotNull(refInfoString)) {
			String[][] refInfos = refInfoString.split("\n").collect { String s ->
				s.split(" ")
			}

			refInfos = refInfos.sort { String[] a, String[] b ->
				a[1].compareTo(b[1])
			}

			String refName = refInfos.last()[0]

			logger.lifecycle "git checkout {} -- build-working-dir.xml working.dir.properties", refName

			exec {
				commandLine "git", "checkout", refName, "--", "build-working-dir.xml", "working.dir.properties"
				workingDir = projectDir.parentFile
			}

			exec {
				commandLine "git", "reset", "--", "build-working-dir.xml", "working.dir.properties"
				workingDir = projectDir.parentFile
			}
		}
		else {
			logger.lifecycle "git clone --branch=master-private --depth=1 --no-checkout --single-branch {} {}", gitRepositoryURL, gitRepositoryDir.name

			exec {
				commandLine "git", "clone", "--branch=master-private", "--depth=1", "--no-checkout", "--single-branch", gitRepositoryURL, gitRepositoryDir.name
				workingDir = projectDir.parentFile
			}

			exec {
				commandLine "git", "checkout", "refs/heads/master-private", "--", "build-working-dir.xml", "working.dir.properties"
				workingDir = gitRepositoryDir
			}

			ant.move(file: new File(gitRepositoryDir, "build-working-dir.xml"), todir: projectDir.parentFile)
			ant.move(file: new File(gitRepositoryDir, "working.dir.properties"), todir: projectDir.parentFile)
		}
	}
}

removeDXPScript {
	doLast {
		delete gitRepositoryDir, new File(projectDir.parentFile, "build-working-dir.xml"), new File(projectDir.parentFile, "working.dir.properties")
	}
}